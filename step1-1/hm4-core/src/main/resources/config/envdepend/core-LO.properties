.#
# core　ローカル環境依存値設定ファイル
#

# 通知メール受信者一覧
# 受信者を複数設定する場合はカンマで区切ってください。
# 設定例 "XXXXX@itec.hankyu-hanshin.co.jp","XXXXX@itec.hankyu-hanshin.co.jp"
noticemail.receivers=noticemail-receivers1@itec.hankyu-hanshin.co.jp
# 接続先URL
connect.url=http://localhost
secure.connect.url=https://localhost
# 受注コードのプレフィックス文字列
# 受注コードのプレフィックスを　【半角英大文字と半角数字のみで最大3桁まで指定可能】
# ※注意1※　プレフィックスに半角英小文字を含めると受注明細帳票にバーコードが表示されません。
# ※注意2※　プレフィックスを指定すると受注コードのシーケンス桁数が減少するため、1日の最大受注件数が制限されます。
# （最大受注件数を超えると同一受注コードが割り当てられる。）
# プレフィックスなし= 100万受注/日まで,1桁= 10万受注/日まで,2桁= 1万受注/日まで,3桁= 1000受注/日まで
# env-migrate:lo.order.code.prefix
order.code.prefix=
# サイトマップトップディレクトリURL
sitemapxmloutput.topdir.url=https://localhost/pdr/sitemap/

# WEB-API接続用URL TODO プロパティ改善
# webapi.url=http://localhost:8085
# WEB-API接続環境
# 本番：pdr-web-api ステージング：pdr-web-api-st
# webapi.environment=pdr-web-api
# WEB-API接続用拡張子
# webapi.extension=

# WEB-API 文字コード env-migrate:lo.webapi.charset
webapi.charset=UTF-8
# WEB-API 接続タイムアウト時間(ミリ秒) env-migrate:lo.webapi.connect.timeout
webapi.connect.timeout=90000
# WEB-API 読み取りタイムアウト時間(ミリ秒) env-migrate:lo.webapi.read.timeout
# 2018/04/03 10万超の会員情報連携にてタイムアウトエラー発生に付き、時間を伸ばした
# webapi.read.timeout=90000
webapi.read.timeout=600000
# WEB-API リクエスト、レスポンスデータログ出力有無[0:出力しない/1:出力する] env-migrate:lo.webapi.log.output.flg
webapi.log.output.flg=1
# WEB-API アラートメール送信有無[0:送信しない/1:送信する] env-migrate:lo.webapi.mail.send.flg
webapi.mail.send.flg=1
#ログイン前閲覧不可商品区分値
#カンマ区切りで複数指定可 env-migrate:lo.goods.not.view.type
goods.not.view.type=21,11,12,13
# 未登録会員照会発生メール 送信有無[0:送信しない/1:送信する] env-migrate:lo.admin.send.mail.flg
admin.send.mail.flg=1

## WEB-API 接続URL
# 会員系
# 会員情報登録 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.adduserinformation=http://localhost:8085/pdr-web-api/member/AddUserInformation
# 会員変更情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.getuserinformation=http://localhost:8085/pdr-web-api/member/GetUserInformation
# 会員情報更新 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.repusermailaddress=http://localhost:8085/pdr-web-api/member/RepUserMailaddress
# 会員お知らせ情報更新 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.repusernotice=http://localhost:8085/pdr-web-api/member/RepUserNotice
#2023-renew No85-1 from here
# 会員FAX情報更新 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.repuserfax=http://localhost:8085/pdr-web-api/member/RepUserFax
#2023-renew No85-1 to here
# お届け先参照 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.getdestination=http://localhost:8085/pdr-web-api/member/GetDestination
# お届け先削除 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.deldestination=http://localhost:8085/pdr-web-api/member/DelDestination
# お届け先登録 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.member.adddestination=http://localhost:8085/pdr-web-api/member/AddDestination

# 商品系
# 商品在庫数取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getstock=http://localhost:8085/pdr-web-api/goods/GetStock
# 取りおき情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getreserve=http://localhost:8085/pdr-web-api/goods/GetReserve
# 数量割引情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getquantitydiscount=http://localhost:8085/pdr-web-api/goods/GetQuantityDiscount
# 価格情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getprice=http://localhost:8085/pdr-web-api/goods/GetPrice
# シリーズ商品価格情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getseriesprice=http://localhost:8085/pdr-web-api/goods/GetSeriesPrice
# 2023-renew No11 from here
# 販売可否判定情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getsalecheck=http://localhost:8085/pdr-web-api/goods/GetSaleCheck
# 2023-renew No11 to here
# 2023-renew No92 from here
# 後継品代替品情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getothergoods=http://localhost:8085/pdr-web-api/goods/GetOtherGoods
# 2023-renew No92 to here
# 商品入荷情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getrestock=http://localhost:8085/pdr-web-api/goods/GetReStock
# 商品セール情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.goods.getsale=http://localhost:8085/pdr-web-api/goods/GetSale

# 注文系
# 割引適用結果取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getdiscountsresult=http://localhost:8085/pdr-web-api/order/GetDiscountsResult
# 受注連携 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.addorderinformation=http://localhost:8085/pdr-web-api/order/AddOrderInformation
# プロモーション env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getpromotioninformation=http://localhost:8085/pdr-web-api/order/GetPromotionInformation
# 配送情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getdeliveryinformation=http://localhost:8085/pdr-web-api/order/GetDeliveryInformation
# 出荷情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getshipmentinformation=http://localhost:8085/pdr-web-api/order/GetShipmentInformation
# 注文保留チェック env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.orderpendingcheck=http://localhost:8085/pdr-web-api/order/OrderPendingCheck
# 注文履歴（未配送）取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getnotyetshippingorderhistory=http://localhost:8085/pdr-web-api/order/GetNotYetShippingOrderHistory
# 注文履歴（配送済み）取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getpreshipmentorderhistory=http://localhost:8085/pdr-web-api/order/GetPreShipmentOrderHistory
# 注文履歴（過去1年）取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getpreshipmentorderhistoryaggregate=http://localhost:8085/pdr-web-api/order/GetPreShipmentOrderHistoryAggregate
# 購入済み商品情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getpurchasedcommodityinformation=http://localhost:8085/pdr-web-api/order/GetPurchasedCommodityInformation
# 消費税率取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getconsumptiontaxrate=http://localhost:8085/pdr-web-api/order/GetConsumptionTaxRate
# 数量割引適用結果取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.getquantitydiscountresult=http://localhost:8085/pdr-web-api/order/GetQuantityDiscountsResult

# 受注詳細情報取得 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.credit.getorderdetailinformation=http://localhost:8085/pdr-web-api/credit/GetOrderDetailInformation
# オーソリ結果連携 env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.credit.creditresult=http://localhost:8085/pdr-web-api/credit/CreditResult
# クーポン有効性チェック env-migrate:lo.webapi.url,lo.webapi.environment,lo.webapi.extension
webapi.url.order.couponcheck=http://localhost:8085/pdr-web-api/order/CouponCheck

# 2023-renew No14 from here
# 前回支払方法取得
webapi.url.order.getbeforepayment=http://localhost:8085/pdr-web-api/order/GetBeforePayment
# 出荷予定日取得
webapi.url.order.getshipmentdate=http://localhost:8085/pdr-web-api/order/GetShipmentDate
# 2023-renew No14 to here

# 2023-renew No24 from here
# クーポン取得
webapi.url.order.addcoupon=http://localhost:8085/pdr-web-api/order/AddCoupon
# 利用可能クーポン一覧取得
webapi.url.order.getcouponlist=http://localhost:8085/pdr-web-api/order/GetCouponList
# 2023-renew No24 to here

# 2023-renew No68 from here
# 注文キャンセル
webapi.url.order.cancelorder=http://localhost:8085/pdr-web-api/order/CancelOrder
# 2023-renew No68 to here

# UK-API 文字コード
ukapi.charset=UTF-8
# UK-API 接続タイムアウト時間(ミリ秒)
ukapi.connect.timeout=90000
# UK-API 読み取りタイムアウト時間(ミリ秒)
ukapi.read.timeout=600000
# UK-API リクエスト、レスポンスデータログ出力有無[0:出力しない/1:出力する]
ukapi.log.output.flg=1

# 2023-renew No36-1, No61,67,95 from here
## UK-API 接続URL
# 関連ワード
ukapi.url.rword=http://localhost:8085/pdr-web-api/ukapi/rword
# ユニサーチ（商品）
ukapi.url.unisearch.goods=http://localhost:8085/pdr-web-api/ukapi/p1/v1/pdr
# ユニサーチ（コンテンツ）
ukapi.url.unisearch.contents=http://localhost:8085/pdr-web-api/ukapi/p1/v1/pdrcontents
# 2023-renew No36-1, No61,67,95 to here

## デバッグモード
## エラー画面（error.html）でスタックトレースを表示する／しない（true/false）
## エラーメッセージにエラーコードを含める判定にも利用
debug=true
# 非同期処理対象ファイル出力パス
batch.file.path=C:/pdr/data/hitmall/dev_pdr/admin/tmp

## メール env-migrate:lo.mail.smtp.server
mail.smtp.host=localhost
# メールに記載するシステム名
alert.mail.system=PDR 開発環境
# メール送信者アドレス
mail.from.address=info@itec.hankyu-hanshin.co.jp
# メール件名ショップ名
subject.shop.name=【PDR 公式オンラインショップ】

# 商品画像相対パス(HTML, JSONで表示する場合に利用)
images.path.goods=/g_images
# 商品画像絶対パス(画像を配置する場合に利用) env-migrate:lo.absolute.path.admin.pc
real.images.path.goods=C:/pdr/home/hitmall/dev_pdr/public_html/g_images
# 商品画像アップロード先絶対パス(ZIP画像ファイルアップロードの場合に利用) env-migrate:lo.absolute.path.admin.pc
goodsimage.input.directory=C:/pdr/data/hitmall/dev_pdr/admin/g_images_input
# デザイン画像アップロード先絶対パス(ZIP画像ファイルアップロードの場合に利用) env-migrate:lo.absolute.path.admin.pc
goodsimage.d_images.directory=C:/pdr/home/hitmall/dev_pdr/public_html/d_images

# 画像URL
# カテゴリ画像相対パス(HTMLで表示する場合に利用)
images.path.category=/d_images/category
## サイドメニューカテゴリ画像相対パス(HTMLで表示する場合に利用)
images.path.lnav_category=/d_images/lnav_category
## サイドメニューカテゴリ画像のファイル名規則
#  命名）　lnav_ + [カテゴリID] + .gif
#  例）　設定値：lnav_ カテゴリID:okaimono
#    lnav_okaimono.gif / lnav_okaimono_o.gif
lnav_category.name=lnav_


# 商品画像のリサイズパターン
# パターン①：TOP、商品一覧、商品検索、カート、ご注文確認、ご注文完了、マイリスト、注文履歴詳細の画像
images.path.goods.resize.p1=/resize/p1
# パターン①の高解像度：TOP、商品一覧、商品検索、カート、ご注文確認、ご注文完了、マイリスト、注文履歴詳細の画像（2倍）
images.path.goods.resize.p1x2=/resize/p1x2
# パターン②：商品詳細の大画像
images.path.goods.resize.p2=/resize/p2
# パターン②の高解像度：商品詳細の大画像（2倍）
images.path.goods.resize.p2x2=/resize/p2x2

# Facebook アプリケーションID
facebook.app.id=
# Twitter アカウント名
twitter.via=
# GMOトークン決済JavaScriptのURL
gmo.token.js.src=https://stg.static.mul-pay.jp/ext/js/token.js
# 通信内容のログ出力用Interceptor
# true=セキュリティコードなど特定のパラメータはログ出力時にマスキングする（@see paymentclient.dicon）
paymentclient.log.mask=false
# ショップ名
shop.name=PDR 公式オンラインショップ

## コンテキストパス
contextPathFrontPc=
contextPathAdminPc=/admin

## 案件毎に修正が必要な設定
# ショップ識別子
shopId=pdr
# 接続先URL
cmp.connect.url=http://localhost
cmp.subContext.pc=
cmp.rootContext=

# メール等のメッセージ表示のURL
web.site.url=https://localhost/
# SMTPサーバ env-migrate:lo.mail.smtp.server
alert.mail.smtp=localhost
# メール送信者 env-migrate:lo.mail.from
alert.mail.from=info+hitmall4@itec.hankyu-hanshin.co.jp
# エラーメール受信者(複数の場合はカンマ区切り) env-migrate:lo.mail.receivers
alert.mail.recipient=mail-receivers1@itec.hankyu-hanshin.co.jp
# オーソリエラーメール受信者(複数の場合はカンマ区切り)
alert.mail.recipient.authority=XXXXX@itec.hankyu-hanshin.co.jp
# 通知メール受信者(複数の場合はカンマ区切り) env-migrate:lo.noticemail.receivers
alert.noticemail.recipient=noticemail-receivers1@itec.hankyu-hanshin.co.jp

# Paygent Customization from here
## 【ペイジェント】
# ペイジェントの会員IDのプレフィックス文字列
# ペイジェントの会員IDがプレフィックス文字列+会員SEQで生成されるのでバッティングしないように各位適当に設定してください
paygent.member.prefix=
# マーチャントID
paygent.merchant.id=32020
# 接続ID
paygent.connect.id=test32020
# 接続パスワード
paygent.connect.password=9sMTuDt4TsAlpO
# 電文バージョン番号
paygent.telegram.version=1.0
# 有効性チェックフラグ
paygent.valid.check.flg=1
# コンビニ決済の接続タイプ
paygent.convenience.connection.type=
# トークン生成鍵の設定
paygent.token.key=test_8vmHVZjQxKIET1VHzUY7X57C
# PAYGENTトークン決済JavaScriptのURL
paygent.token.js.src=https://sandbox.paygent.co.jp/js/PaygentToken.js
## modenv.propertiesの設定値
# クライアント証明書ファイルパス（他の証明書をインストールしている場合重複しないこと）
paygentB2Bmodule.client_file_path=C:/test3-20221218.pfx
# ペイジェントモジュールURL　（各環境のXX_XX_pdr-hm34-core.tmpl.propertiesから移動 2021/9/2）
paygentB2Bmodule.url=https://sandbox.paygent.co.jp
# プロキシサーバー設定（プロキシサーバーを使用する場合のみ設定）
paygentB2Bmodule.proxy_server_name=
paygentB2Bmodule.proxy_server_ip=
paygentB2Bmodule.proxy_server_port=0
# 接続ID、接続パスワードが設定されない場合に使用されるデフォルト値（空白可）
paygentB2Bmodule.default_id=test32020
paygentB2Bmodule.default_password=9sMTuDt4TsAlpO
# タイムアウト値（ミリ秒）
paygentB2Bmodule.timeout_value=35000
# ログファイル出力パス
paygentB2Bmodule.log_output_path=C:/pdr/var/log/tomcat/dev_pdr/shop/paygent
# デバッグオプション
# 1:リクエスト/レスポンスをログ出力
# 0:エラー時のみ出力
# ※本番稼動時は必ず0を設定してください
paygentB2Bmodule.debug_flg=0
# 最大照会件数（2000件がペイジェントシステムの最大値なのでそれ以上の値は無効）
paygentB2Bmodule.select_max_cnt=2000
# Paygent Customization to here


# 【Cuenote SMS】
#### モック設定 ここから #####
# Cuenote API 認証ユーザ
cuenote.api.auth.user=
# Cuenote API 認証パスワード
cuenote.api.auth.pass=
# Cuenote API 接続URL
cuenote.api.url=http://localhost:8085/pdr-web-api/CuenoteApi
# Cuenote API 入荷お知らせアドレス帳レコードインポートパス
cuenote.api.path.goodsReceivedAddressImport=/GetReStockCuenoteApiAddressImport
# Cuenote API お気に入りセール通知アドレス帳レコードインポートパス
cuenote.api.path.saleAddressImport=/GetSaleCuenoteApiAddressImport
# Cuenote API メール文書セット複製パス
cuenote.api.path.mailSet=/GetCuenoteApiMailSet
# Cuenote API 配信情報予約パス
cuenote.api.path.deliveryReserve=/GetCuenoteApiDeliveryReserve
# Cuenote API 配信情報取得パス
cuenote.api.path.getDelivery=/GetCuenoteApiGetDelivery
# Cuenote API コネクションタイムアウト(ミリ秒)
cuenote.api.connection.timeout=30000
# Cuenote API ソケットタイムアウト(ミリ秒)
cuenote.api.read.timeout=30000
# Cuenote API リトライ回数
cuenote.api.connect.retry.max=5
# Cuenote API 入荷お知らせアドレス帳ＩＤ
cuenote.api.addressId.goodsReceived=65a75e84
# Cuenote API お気に入りアドレス帳ＩＤ
cuenote.api.addressId.sale=65a75eb1
# Cuenote API 入荷お知らせメールテンプレート
cuenote.api.template.goodsReceived=22434
# Cuenote API お気に入りメールテンプレート
cuenote.api.template.sale=22440
#### モック設定 ここまで #####

## Cuenote API 認証ユーザ
#cuenote.api.auth.user=m57bt4kw$itec-api1
## Cuenote API 認証パスワード
#cuenote.api.auth.pass=Itecapipass1
## Cuenote API 接続URL
#cuenote.api.url=https://fc-demo67x.cuenote.jp/fcapi/v3.5
## Cuenote API 入荷お知らせアドレス帳レコードインポートパス
#cuenote.api.path.goodsReceivedAddressImport=/webdb/65a75e84/import
## Cuenote API お気に入りセール通知アドレス帳レコードインポートパス
#cuenote.api.path.saleAddressImport=/webdb/65a75eb1/import
## Cuenote API メール文書セット複製パス
#cuenote.api.path.mailSet=/mail
## Cuenote API 配信情報予約パス
#cuenote.api.path.deliveryReserve=/delivery
## Cuenote API 配信情報取得パス
#cuenote.api.path.getDelivery=/delivery/{0}
## Cuenote API コネクションタイムアウト(ミリ秒)
#cuenote.api.connection.timeout=30000
## Cuenote API ソケットタイムアウト(ミリ秒)
#cuenote.api.read.timeout=30000
## Cuenote API リトライ回数
#cuenote.api.connect.retry.max=5
## Cuenote API 入荷お知らせアドレス帳ＩＤ
#cuenote.api.addressId.goodsReceived=65a75e84
## Cuenote API お気に入りアドレス帳ＩＤ
#cuenote.api.addressId.sale=65a75eb1
## Cuenote API 入荷お知らせメールテンプレート
#cuenote.api.template.goodsReceived=22434
## Cuenote API お気に入りメールテンプレート
#cuenote.api.template.sale=22440

# PDR Migrate Customization from here# PDR Migrate Customization from here
### 入荷お知らせ完了メール
## InstantMailSettingForMemberInfoUpdatePdr.dicon
# 通知メールを送信する際に使用する SMTP サーバ
mail.setting.restock.sendmail.smtp.server=localhost
# 通知メール送信者
mail.setting.restock.sendmail.mail.from=pdr-staging+lo@itec.hankyu-hanshin.co.jp
# 通知メール受信者一覧
# 受信者を複数設定する場合はカンマで区切ってください。(ダブルクォーテーション不要)
# 設定例 XXXXX@itec.hankyu-hanshin.co.jp,XXXXX@itec.hankyu-hanshin.co.jp
mail.setting.restock.sendmail.mail.receivers=pdr-staging+lo@itec.hankyu-hanshin.co.jp
