#
# システム設定
#

## ショップ識別子 env-migrate:shopId
shopId=pdr
#メール
mail.smtp.host=@mail.smtp.host@
# メール送信者アドレス
mail.from.address=@mail.from.address@
# メール件名ショップ名
subject.shop.name=@subject.shop.name@
# 非同期処理対象ファイル出力パス
batch.file.path=@batch.file.path@
# お届け先 最大数
order.max.receiver.count=30

## 受注コードのプレフィックス文字列
# 受注コードのプレフィックスを　【半角英大文字と半角数字のみで最大3桁まで指定可能】
# ※注意 ※プレフィックスを指定すると受注コードのシーケンス桁数が減少するため、1日の最大受注件数が制限されます。
#          （最大受注件数を超えると同一受注コードが割り当てられる。）
# プレフィックスなし= 100万受注/日まで、1桁= 10万受注/日まで、2桁= 1万受注/日まで、3桁= 1000受注/日まで
order.code.prefix=@order.code.prefix@

## カート投入可能商品件数
max.cart.goods.count=50
##クレジットカードの有効期限（年）を今年から何年分出すか
expiration.date.year=20
# フリーエリア 商品番号 最大数
freearea.targetgoods.max.count=10
# 商品画像アップロード先絶対パス
real.images.path.goods=@real.images.path.goods@
# 商品画像ZIPファイルファイルのアップロード先絶対パス
goodsimage.input.directory=@goodsimage.input.directory@
## 商品画像相対パス(HTML・JSONで表示する場合に利用)
images.path.goods=@images.path.goods@
# デザイン画像ZIPファイルのアップロード先絶対パス
goodsimage.d_images.directory=@goodsimage.d_images.directory@

# 画像URL
## カテゴリ画像相対パス(HTMLで表示する場合に利用)
images.path.category=@images.path.category@
## サイドメニューカテゴリ画像相対パス(HTMLで表示する場合に利用)
images.path.lnav_category=@images.path.lnav_category@
## サイドメニューカテゴリ画像のファイル名規則
#  命名）　lnav_ + [カテゴリID] + .gif
#  例）　設定値：lnav_ カテゴリID:okaimono
#    lnav_okaimono.gif / lnav_okaimono_o.gif
lnav_category.name=@lnav_category.name@

# サイト判定用
# HTypeSiteType#FRONT_SITE_PATH
hTypeSiteType.site.path=front

## 商品画像のリサイズパターン thymeleafより利用する
# パターン①：TOP、商品一覧、商品検索、カート、ご注文確認、ご注文完了、マイリスト、注文履歴詳細の画像
images.path.goods.resize.p1=@images.path.goods.resize.p1@
# パターン①の高解像度：TOP、商品一覧、商品検索、カート、ご注文確認、ご注文完了、マイリスト、注文履歴詳細の画像（2倍）
images.path.goods.resize.p1x2=@images.path.goods.resize.p1x2@
# パターン②：商品詳細の大画像
images.path.goods.resize.p2=@images.path.goods.resize.p2@
# パターン②の高解像度：商品詳細の大画像（2倍）
images.path.goods.resize.p2x2=@images.path.goods.resize.p2x2@

# Facebook 利用する/しない(true/false)
facebook.use=true
# Facebook アプリケーションID
facebook.app.id=@facebook.app.id@
# Twitter 利用する/しない(true/false)
twitter.use=true
# Twitter アカウント名
twitter.via=@twitter.via@
# GMOトークン決済JavaScriptのURL
gmo.token.js.src=@gmo.token.js.src@
# 通信内容のログ出力用Interceptor
# true=セキュリティコードなど特定のパラメータはログ出力時にマスキングする
paymentclient.log.mask=@paymentclient.log.mask@
# Line 利用する/しない(true/false)
line.use=true

## デバッグモード
## エラー画面（error.html）でスタックトレースを表示する／しない（true/false）
debug=@debug@
## ショップSEQ
shopseq=1001
## トップカテゴリID
category.id.top=top
## 注文時のアドレス帳登録名称。未設定の場合は画面から入力された、姓＋名を使用
order.regist.addressbook.name=
## 送信確認メールの有効期限の設定 時間(h) デフォルト24時間
effective.time=24
## 広告パラメータKey
campaign.param.key=ccd
## キャンペーン有効日数 デフォルト90日間
## 運用途中での切り替えは、集計結果がおかしくなる為想定していない
campaign.effective.day=90

# オーソリ保持期間（日）
authory.hold.period=60
# メール送信開始期間（日）
mail.send.start.period=14

# 商品画像
# 商品グループ詳細画像最大枚数
goodsimage.max.count=10
# 商品画像ファイル名区切り文字
goodsimage.name.separator=_

# 同一商品カートマージ
# 0 = 同一商品マージしない、　1 = 同一商品マージする
cartgoods.merge=1
# 商品配送準備日数
# お届け希望日プルダウンに反映する
delivery.number.days=2
# 全額クーポン決済方法SEQ
# 初期登録データの決済方法SEQと同じ値を設定
coupon.settlement.method.seq=3000
# 全額ポイント決済方法SEQ
# 初期登録データの決済方法SEQと同じ値を設定
point.settlement.method.seq=4000
# 無料お支払い決済方法SEQ
# 初期登録データの決済方法SEQと同じ値を設定
free.settlement.method.seq=5000

## 運営者 ログイン用
# アカウントロックされるまでのログイン失敗回数
# ここの設定回数失敗するとロックする/設定値は99以下の数字であること/0に設定すると、アカウントロック機能は無効になる
admin.account.lock.count=0
# 運営者　パスワード有効期限日数（パスワード登録日に指定日数をプラス） ※Ver4でも使用しない機能
admin.password.expiry.days=90
# 運営者　送信確認メールの有効期限の設定 時間(h)
admin.effective.time=24
# 運営者　パスワード再設定機能の利用有無
# 0:パスワード再設定のリンクをログイン画面に表示しない , 1:表示する
admin.password.reset.display=0

## 非同期処理設定
# 【参考】スレッド設定の流れ ====================================
#    [corePoolSize]までThreadを作る
#    [corePoolSize]が一杯になると[queueCapacity]までキューイングする
#    [queueCapacity]を越えると[maxPoolSize]までThreadを増やす
#    [maxPoolSize]を越えるとrejectされる
# ========================================================
async.executor.core.pool.size=25
async.executor.queue.capacity=25
async.executor.max.pool.size=25
async.executor.thread.name.prefix=AsyncTask-

## 代理ログイン権限 ※複数指定の場合は「,(カンマ)」区切り
# 「受注管理」の「参照・更新・DL・メール」
# 「会員管理」の「参照・更新・メール」
proxy.login.auth.type=ORDER:8,MEMBER:8

## 自動登録用カード会社名
## マスタに登録されていないカード会社がGMOより返却された際に
## 登録するカードブランド情報に設定
auto.regist.cardbrandname=不明カード会社
# HIT-MALLVer3.6.1 encryptKey.properties
## 端末識別番号暗号化キー
accessUidEncryptKey=2f84c3f982d9d4c4881c86f5a95988ca
## 会員パスワード暗号化キー
memberPassEncryptKey=57ce3db6f1c28def0974547db5e98119
## 管理者パスワード暗号化キー
adminPassEncryptKey=d57b0f51aa28d5b5ff8ade952052c842
#会員でない顧客の名称
guest.lastname=ゲスト
guest.firstname=タロウ
# ショップ名
shop.name=@shop.name@

### 広告
# 広告出力期間(日数)
order.campaign.output.term=90
# 広告出力上限数
order.campaign.output.max=50
# 広告分類接頭辞1
order.campaign.prefix.1=
# 広告分類接頭辞2
order.campaign.prefix.2=
# 広告分類接頭辞3
order.campaign.prefix.3=
## キャンペーン デフォルトリダイレクトURL PC用
## キャンペーンが終了・存在しない場合に遷移する画面
campaign.default.redirect.url.pc=@contextPathFrontPc@/index.html
## 広告URLチェック時に使用、広告URL登録時にURLが変換されるので、チェック時にも変換して確認
campaign.url.check.replace.pc=
# 広告URL env-migrate:contextPathFrontPc
campaign.url.pc=@cmp.connect.url@/ad.html
campaign.url.pc.html=@cmp.connect.url@@cmp.rootContext@@cmp.subContext.pc@/ad.html

#PDR Migrate Customization from here
## カート投入可能商品価格
max.cart.goods.price=2000000
##ショップ別最大決済金額
order.max.amount=2000000
#PDR Migrate Customization to here

## ニュースURL
#　URL入力制限（絶対パス・相対パス入力有効）
# 絶対パス指定時、http://,https://のみの入力は不可
# 相対パス指定時、パスの始まりに/ショップ識別子/必須
news.url.validatePattern=(https?://[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]+|/[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]*)

# アカウントロックされるまでのログイン失敗回数
# ここの設定回数失敗するとロックする
# 設定値は99以下の数字であること
# 0に設定すると、アカウントロック機能は無効になる
account.lock.count=5
## お気に入り登録商品最大数
favorite.goods.max=200
## 住所録最大登録件数
addressbook.max=50
## 新着商品画像(newアイコン)の表示期間
## 登録されている期間からこの日数を経過するまでが期間になる。
whatsnew.view.days=-1
## カテゴリ表示階層数 サイドメニュー
sidemenu.category.view.level=3
## カテゴリ表示階層数 商品検索画面 検索条件
goods.search.category.view.level=2


###########################################################################################################
# 案件新規追加項目
###########################################################################################################
# PDR Migrate Customization from here
# ログイン前閲覧不可商品区分値
# カンマ区切りで複数指定可
goods.not.view.type=@goods.not.view.type@

# 未登録会員照会発生メール 送信有無[0:送信しない/1:送信する]
admin.send.mail.flg=@admin.send.mail.flg@

# WEB-API 文字コード
webapi.charset=@webapi.charset@
# WEB-API 接続タイムアウト時間(ミリ秒)
webapi.connect.timeout=@webapi.connect.timeout@
# WEB-API 読み取りタイムアウト時間(ミリ秒)
webapi.read.timeout=@webapi.read.timeout@
# WEB-API リクエスト、レスポンスデータログ出力有無[0:出力しない/1:出力する]
webapi.log.output.flg=@webapi.log.output.flg@
# WEB-API アラートメール送信有無[0:送信しない/1:送信する]
webapi.mail.send.flg=@webapi.mail.send.flg@

# WEB-API 接続URL
# 会員系
# 会員情報登録
webapi.url.member.adduserinformation=@webapi.url.member.adduserinformation@
# 会員変更情報取得
webapi.url.member.getuserinformation=@webapi.url.member.getuserinformation@
# 会員情報更新
webapi.url.member.repusermailaddress=@webapi.url.member.repusermailaddress@
# 会員お知らせ情報更新
webapi.url.member.repusernotice=@webapi.url.member.repusernotice@
#2023-renew No85-1 from here
# 会員お知らせ情報更新
webapi.url.member.repuserfax=@webapi.url.member.repuserfax@
#2023-renew No85-1 to here
# お届け先参照
webapi.url.member.getdestination=@webapi.url.member.getdestination@
# お届け先削除
webapi.url.member.deldestination=@webapi.url.member.deldestination@
# お届け先登録
webapi.url.member.adddestination=@webapi.url.member.adddestination@

# 商品系
# 商品在庫数取得
webapi.url.goods.getstock=@webapi.url.goods.getstock@
# 取りおき情報取得
webapi.url.goods.getreserve=@webapi.url.goods.getreserve@
# 数量割引情報取得
webapi.url.goods.getquantitydiscount=@webapi.url.goods.getquantitydiscount@
# 価格情報取得
webapi.url.goods.getprice=@webapi.url.goods.getprice@
# シリーズ商品価格情報取得
webapi.url.goods.getseriesprice=@webapi.url.goods.getseriesprice@
# 2023-renew No11 from here
# 販売可否判定情報取得
webapi.url.goods.getsalecheck=@webapi.url.goods.getsalecheck@
# 2023-renew No11 to here
# 2023-renew No92 from here
# 後継品代替品情報取得
webapi.url.goods.getothergoods=@webapi.url.goods.getothergoods@
# 2023-renew No92 to here
# 商品入荷情報取得
webapi.url.goods.getrestock=@webapi.url.goods.getrestock@
# 商品セール情報取得
webapi.url.goods.getsale=@webapi.url.goods.getsale@

# 注文系
# 割引適用結果取得
webapi.url.order.getdiscountsresult=@webapi.url.order.getdiscountsresult@
# 受注連携
webapi.url.order.addorderinformation=@webapi.url.order.addorderinformation@
# プロモーション
webapi.url.order.getpromotioninformation=@webapi.url.order.getpromotioninformation@
# 配送情報取得
webapi.url.order.getdeliveryinformation=@webapi.url.order.getdeliveryinformation@
# 出荷情報取得
webapi.url.order.getshipmentinformation=@webapi.url.order.getshipmentinformation@
# 注文保留チェック
webapi.url.order.orderpendingcheck=@webapi.url.order.orderpendingcheck@
# 注文履歴（未配送）取得
webapi.url.order.getnotyetshippingorderhistory=@webapi.url.order.getnotyetshippingorderhistory@
# 注文履歴（配送済み）取得
webapi.url.order.getpreshipmentorderhistory=@webapi.url.order.getpreshipmentorderhistory@
# 注文履歴（過去1年）取得
webapi.url.order.getpreshipmentorderhistoryaggregate=@webapi.url.order.getpreshipmentorderhistoryaggregate@

# 購入済み商品情報取得
webapi.url.order.getpurchasedcommodityinformation=@webapi.url.order.getpurchasedcommodityinformation@
# 消費税率取得
webapi.url.order.getconsumptiontaxrate=@webapi.url.order.getconsumptiontaxrate@
# 数量割引適用結果
webapi.url.order.getquantitydiscountresult=@webapi.url.order.getquantitydiscountresult@

# 受注詳細情報取得
webapi.url.credit.getorderdetailinformation=@webapi.url.credit.getorderdetailinformation@
# オーソリ結果連携
webapi.url.credit.creditresult=@webapi.url.credit.creditresult@
# クーポン有効性チェック
webapi.url.order.couponcheck=@webapi.url.order.couponcheck@

# 2023-renew No14 from here
# 前回支払方法取得
webapi.url.order.getbeforepayment=@webapi.url.order.getbeforepayment@
# 出荷予定日取得
webapi.url.order.getshipmentdate=@webapi.url.order.getshipmentdate@
# 2023-renew No14 to here

# 2023-renew No24 from here
# クーポン取得
webapi.url.order.addcoupon=@webapi.url.order.addcoupon@
# 利用可能クーポン一覧取得
webapi.url.order.getcouponlist=@webapi.url.order.getcouponlist@
# 2023-renew No24 to here

# 2023-renew No68 from here
# 注文キャンセル
webapi.url.order.cancelorder=@webapi.url.order.cancelorder@
# 2023-renew No68 to here

# UK-API 文字コード
ukapi.charset=@ukapi.charset@
# UK-API 接続タイムアウト時間(ミリ秒)
ukapi.connect.timeout=@ukapi.connect.timeout@
# UK-API 読み取りタイムアウト時間(ミリ秒)
ukapi.read.timeout=@ukapi.read.timeout@
# UK-API リクエスト、レスポンスデータログ出力有無[0:出力しない/1:出力する]
ukapi.log.output.flg=@ukapi.log.output.flg@

# 2023-renew No36-1, No61,67,95 from here
# UK-API 接続URL
ukapi.url.rword=@ukapi.url.rword@
# ユニサーチ（商品）
ukapi.url.unisearch.goods=@ukapi.url.unisearch.goods@
# ユニサーチ（商品）
ukapi.url.unisearch.contents=@ukapi.url.unisearch.contents@
# 2023-renew No36-1, No61,67,95 to here

# ダミー商品コード
dummy.goods.code=BundledErrorCode

#注文保留条件
#初回購入上限金額（コンビニ・郵便振込）
transferpaymentuse.firsttime.purchase.limit=50000
# 2023-renew No26 from here
#注文保留とする同一顧客の1日の複数回注文数
multiple.order.count=3
# 2023-renew No26 to here

#診療項目
#診療項目1_表示判定区分
medical.treatment.disp1=1
#診療項目2_表示判定区分
medical.treatment.disp2=1
#診療項目3_表示判定区分
medical.treatment.disp3=1
#診療項目4_表示判定区分
medical.treatment.disp4=1
#診療項目5_表示判定区分
medical.treatment.disp5=0
#診療項目6_表示判定区分
medical.treatment.disp6=0
#診療項目7_表示判定区分
medical.treatment.disp7=0
#診療項目8_表示判定区分
medical.treatment.disp8=0
#診療項目9_表示判定区分
medical.treatment.disp9=0
#診療項目10_表示判定区分
medical.treatment.disp10=0

#診療項目1_タイトル
medical.treatment.title1=小児歯科
#診療項目2_タイトル
medical.treatment.title2=矯正歯科
#診療項目3_タイトル
medical.treatment.title3=訪問
#診療項目4_タイトル
medical.treatment.title4=歯科技工室（院内ラボ）
#診療項目5_タイトル
medical.treatment.title5=診療項目5
#診療項目6_タイトル
medical.treatment.title6=診療項目6
#診療項目7_タイトル
medical.treatment.title7=診療項目7
#診療項目8_タイトル
medical.treatment.title8=診療項目8
#診療項目9_タイトル
medical.treatment.title9=診療項目9
#診療項目10_タイトル
medical.treatment.title10=診療項目10

# 接続先URL
connect.url=@connect.url@
secure.connect.url=@secure.connect.url@

## メール等のメッセージ表示のURL
web.site.url=@web.site.url@
# PDR Migrate Customization to here

# Paygent Customization from here
## ペイジェント通信設定
# ペイジェントの会員IDのプレフィックス文字列
# ペイジェントの会員IDがプレフィックス文字列+会員SEQで生成されるので、
# バッティングしないように各位適当に設定してください
paygent.member.prefix=@paygent.member.prefix@
# マーチャントＩＤ
paygent.merchant.id=@paygent.merchant.id@
# 接続ID
paygent.connect.id=@paygent.connect.id@
# 接続パスワード
paygent.connect.password=@paygent.connect.password@
# 電文バージョン番号
paygent.telegram.version=@paygent.telegram.version@
# 有効性チェックフラグ
paygent.valid.check.flg=@paygent.valid.check.flg@
# コンビニ決済の接続タイプ
paygent.convenience.connection.type=@paygent.convenience.connection.type@
# トークン生成鍵の設定
paygent.token.key=@paygent.token.key@
# ペイジェントトークン決済JavaScriptのURL
paygent.token.js.src=@paygent.token.js.src@
# Paygent Customization to here

## 【Cuenote SMS】
# Cuenote API 認証ユーザ
cuenote.api.auth.user=@cuenote.api.auth.user@
# Cuenote API 認証パスワード(※※※要暗号化※※※)
cuenote.api.auth.pass=@cuenote.api.auth.pass@
# Cuenote API 接続URL
cuenote.api.url=@cuenote.api.url@
# Cuenote API 入荷お知らせアドレス帳レコードインポートパス
cuenote.api.path.goodsReceivedAddressImport=@cuenote.api.path.goodsReceivedAddressImport@
# Cuenote API お気に入りセール通知アドレス帳レコードインポートパス
cuenote.api.path.saleAddressImport=@cuenote.api.path.saleAddressImport@
# Cuenote API メール文書セット複製パス
cuenote.api.path.mailSet=@cuenote.api.path.mailSet@
# Cuenote API 配信情報予約パス
cuenote.api.path.deliveryReserve=@cuenote.api.path.deliveryReserve@
# Cuenote API 配信情報取得パス
cuenote.api.path.getDelivery=@cuenote.api.path.getDelivery@
# Cuenote API コネクションタイムアウト(ミリ秒)
cuenote.api.connection.timeout=@cuenote.api.connection.timeout@
# Cuenote API ソケットタイムアウト(ミリ秒)
cuenote.api.read.timeout=@cuenote.api.read.timeout@
# Cuenote API リトライ回数
cuenote.api.connect.retry.max=@cuenote.api.connect.retry.max@
# Cuenote API 入荷お知らせアドレス帳ＩＤ
cuenote.api.addressId.goodsReceived=@cuenote.api.addressId.goodsReceived@
# Cuenote API メール送信時間猶予
cuenote.api.goodsReceived.send.mail.extension=5
# Cuenote API お気に入りセール通知メール配信予約時間
cuenote.api.goodsReceived.send.mail.time=10:00:00
# Cuenote API お気に入りアドレス帳ＩＤ
cuenote.api.addressId.sale=@cuenote.api.addressId.sale@
# Cuenote API 入荷お知らせメールテンプレート
cuenote.api.template.goodsReceived=@cuenote.api.template.goodsReceived@
# Cuenote API お気に入りメールテンプレート
cuenote.api.template.sale=@cuenote.api.template.sale@
# Cuenote API メール本文桁数上限
cuenote.api.limit.body.length=150000

### 【MemberInfoUpdateBatch】入荷お知らせ完了メール
mail.setting.restock.sendmail.smtp.server=@mail.setting.restock.sendmail.smtp.server@
mail.setting.restock.sendmail.mail.from=@mail.setting.restock.sendmail.mail.from@
mail.setting.restock.sendmail.mail.receivers=@mail.setting.restock.sendmail.mail.receivers@

# 2023-renew No65 from here
## 入荷お知らせ上限
restockannounce.goods.max=200
# 2023-renew No65 to here
